---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a base networking environment to launch resources

Parameters:

  VpcCidrBlock:
    Type: String
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16

  CreatePrivateNetworks:
    Type: String
    Description: Create private networking resources
    AllowedValues: [true, false]
    Default: false

Conditions:
  CreatePrivateNetworks:
    !Equals [true, !Ref CreatePrivateNetworks]
  UsEast1Condition:
    Fn::Equals:
    - !Ref AWS::Region
    - "us-east-1"

Resources:

  #
  # Public VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
  IPv6CidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref 'VPC'
      AmazonProvidedIpv6CidrBlock: true

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        # us-east-1 needs .ec2.internal, the rest of the regions get <region>.compute.internal.
        # See http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
        Fn::If:
        - UsEast1Condition
        - "ec2.internal"
        - !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  #
  # Internet gateways (ipv4, and egress for ipv6)
  #
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: IGW
      VpcId:
        Ref: VPC
  EgressOnlyIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Condition: CreatePrivateNetworks
    Properties:
      VpcId: !Ref VPC

  #
  # Public route table
  #
  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt'
  PublicDefaultIpv4Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
  PublicDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicRt
      GatewayId:
        Ref: IGW

  #
  # Public subnets
  #
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '00::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet0RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet0
      RouteTableId:
        Ref: PublicRt

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRt

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRt

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-egress-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet3RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRt

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '04::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-egress-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet4RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet4
      RouteTableId:
        Ref: PublicRt

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '05::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-egress-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet5RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet5
      RouteTableId:
        Ref: PublicRt

  #
  # Private route tables
  #
  PrivateRt0:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
  NAT0:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP0
        - AllocationId
      SubnetId:
        Ref: PublicSubnet0
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
  EIP0:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute0:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT0

  NAT0a:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP0a
        - AllocationId
      SubnetId:
        Ref: PublicSubnet0
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-a-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
  EIP0a:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute0a:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt0
      DestinationCidrBlock: 10.0.144.0/20
      NatGatewayId:
        Ref: NAT0a

  PrivateRt0DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  PrivateRt1:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
  NAT1:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
  EIP1:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute1:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
  PrivateRt1DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt1
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  PrivateRt2:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
  NAT2:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
  EIP2:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute2:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2
  PrivateRt2DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt2
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  #
  # Private subnets
  #
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a0::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubne01RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRt0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a1::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRt1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a2::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRt2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 9, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a3::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-egress-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet3RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRt0

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a4::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-egress-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet4RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet4
      RouteTableId:
        Ref: PrivateRt1

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, 16, 12 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a5::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-egress-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet5RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet5
      RouteTableId:
        Ref: PrivateRt2


  #
  # Security groups
  #

  EKSClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Managed Kubernetes on AWS Control Plane Security Group
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-eks-master-sg"

  EKSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the EKS cluster
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-eks-worker-sg"

  EKSNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref EKSNodeSecurityGroup
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  EKSNodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref EKSNodeSecurityGroup
      SourceSecurityGroupId: !Ref EKSClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  EKSControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref EKSClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  EKSNodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref EKSNodeSecurityGroup
      SourceSecurityGroupId: !Ref EKSClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  EKSControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref EKSClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  EKSClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref EKSClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref EKSNodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  EKSClusterControlPlaneFromCalicoHMSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSNodeSecurityGroup
    Properties:
      Description: Allow Calico HMS nodes to communicate with the cluster API Server
      GroupId: !Ref EKSClusterControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref CalicoHMSNodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  CalicoHMSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all Calico HMS nodes
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-hms-node-sg"

  CalicoHMSNodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: CalicoHMSNodeSecurityGroup
    Properties:
      Description: Allow Calico HMS nodes to communicate with each other
      GroupId: !Ref CalicoHMSNodeSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  #
  # IAM Roles
  #
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      RoleName: !Sub "${AWS::StackName}-EKSServiceRole"

  K8sNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref K8sNodeInstanceRole

  K8sNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-K8sExternalDNS"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action: "route53:ChangeResourceRecordSets"
              Resource: "arn:aws:route53:::hostedzone/*"
            - Effect: "Allow"
              Action:
                - "acm:DescribeCertificate"
                - "acm:ListCertificates"
                - "acm:GetCertificate"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ec2:CreateSecurityGroup"
                - "ec2:CreateTags"
                - "ec2:DeleteTags"
                - "ec2:DeleteSecurityGroup"
                - "ec2:DescribeAccountAttributes"
                - "ec2:DescribeAddresses"
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceStatus"
                - "ec2:DescribeInternetGateways"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeTags"
                - "ec2:DescribeVpcs"
                - "ec2:ModifyInstanceAttribute"
                - "ec2:ModifyNetworkInterfaceAttribute"
                - "ec2:RevokeSecurityGroupIngress"
                - "elasticloadbalancing:AddTags"
                - "elasticloadbalancing:AttachLoadBalancerToSubnets"
                - "elasticloadbalancing:CreateListener"
                - "elasticloadbalancing:CreateLoadBalancer"
                - "elasticloadbalancing:CreateLoadBalancerListeners"
                - "elasticloadbalancing:CreateRule"
                - "elasticloadbalancing:CreateTargetGroup"
                - "elasticloadbalancing:ConfigureHealthCheck"
                - "elasticloadbalancing:DeleteListener"
                - "elasticloadbalancing:DeleteLoadBalancer"
                - "elasticloadbalancing:DeleteLoadBalancerListeners"
                - "elasticloadbalancing:DeleteRule"
                - "elasticloadbalancing:DeleteTargetGroup"
                - "elasticloadbalancing:DeregisterTargets"
                - "elasticloadbalancing:DescribeListeners"
                - "elasticloadbalancing:DescribeLoadBalancers"
                - "elasticloadbalancing:DescribeLoadBalancerAttributes"
                - "elasticloadbalancing:DescribeRules"
                - "elasticloadbalancing:DescribeSSLPolicies"
                - "elasticloadbalancing:DescribeTags"
                - "elasticloadbalancing:DescribeTargetGroups"
                - "elasticloadbalancing:DescribeTargetGroupAttributes"
                - "elasticloadbalancing:DescribeTargetHealth"
                - "elasticloadbalancing:DetachLoadBalancerFromSubnets"
                - "elasticloadbalancing:ModifyListener"
                - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                - "elasticloadbalancing:ModifyRule"
                - "elasticloadbalancing:ModifyTargetGroup"
                - "elasticloadbalancing:ModifyTargetGroupAttributes"
                - "elasticloadbalancing:RegisterTargets"
                - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                - "elasticloadbalancing:RemoveTags"
                - "elasticloadbalancing:SetIpAddressType"
                - "elasticloadbalancing:SetSecurityGroups"
                - "elasticloadbalancing:SetSubnets"
                - "elasticloadbalancing:SetWebACL"
                - "iam:CreateServiceLinkedRole"
                - "iam:GetServerCertificate"
                - "iam:ListServerCertificates"
                - "route53:ListHostedZones"
                - "route53:ListResourceRecordSets"
                - "waf:GetWebACL"
                - "waf-regional:GetWebACLForResource"
                - "waf-regional:GetWebACLForResource"
                - "waf-regional:GetWebACL"
                - "waf-regional:AssociateWebACL"
                - "waf-regional:DisassociateWebACL"
                - "tag:GetResources"
                - "tag:TagResources"
              Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      RoleName: !Sub "${AWS::StackName}-K8sNodeInstanceRole"

  CalicoHMSNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref CalicoHMSNodeInstanceRole

  CalicoHMSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-CalicoHMSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
                - "eks:DescribeCluster"
              Resource: "arn:aws:eks:*:*:cluster/*"
            - Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*-CalicoHMSNodeInstanceRole"
      RoleName: !Sub "${AWS::StackName}-CalicoHMSNodeInstanceRole"

Outputs:

  VPC:
    Description: "Virtual private network"
    Value: !Ref VPC
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", VPC ] ]

  PublicSubnet0:
    Description: "First public subnet"
    Value: !Ref PublicSubnet0
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet0 ] ]

  PublicSubnet1:
    Description: "Second public subnet"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet1 ] ]

  PublicSubnet2:
    Description: "Third public subnet"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet2 ] ]

  PrivateSubnet0:
    Condition: CreatePrivateNetworks
    Description: "First private subnet"
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet0 ] ]

  PrivateSubnet1:
    Condition: CreatePrivateNetworks
    Description: "Second private subnet"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet1 ] ]

  PrivateSubnet2:
    Condition: CreatePrivateNetworks
    Description: "Third private subnet"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet2 ] ]

  EKSServiceRoleArn:
    Description: "Allows EKS to manage clusters on your behalf."
    Value: !GetAtt EKSServiceRole.Arn
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", EKSServiceRoleArn ] ]

  K8sNodeInstanceProfileArn:
    Description: "K8s Node Instance Profile"
    Value: !GetAtt K8sNodeInstanceProfile.Arn
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", K8sNodeInstanceProfileArn ] ]

  CalicoHMSNodeInstanceProfileArn:
    Description: "Calico HMS Node Instance Profile"
    Value: !GetAtt CalicoHMSNodeInstanceProfile.Arn
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", CalicoHMSNodeInstanceProfileArn ] ]

  EKSClusterControlPlaneSecurityGroup:
    Description: "Managed Kubernetes on AWS Control Plane Security Group"
    Value: !Ref EKSClusterControlPlaneSecurityGroup
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", EKSClusterControlPlaneSecurityGroup ] ]

  EKSNodeSecurityGroup:
    Description: "Security group for all nodes in the EKS cluster"
    Value: !Ref EKSNodeSecurityGroup
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", EKSNodeSecurityGroup ] ]

  CalicoHMSNodeSecurityGroup:
    Description: "Security group for Calico HMS nodes"
    Value: !Ref CalicoHMSNodeSecurityGroup
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", CalicoHMSNodeSecurityGroup ] ]
